package gestion_ingresos_radio_kat.UI.Propietarios;

import gestion_ingresos_radio_kat.UI.Propietarios.Comisiones.Logica.CalculoIngresos;
import gestion_ingresos_radio_kat.UI.Propietarios.Comisiones.Logica.Modelo.AccesoDatos.RegistroIngresosDAO;
import gestion_ingresos_radio_kat.UI.Propietarios.Comisiones.Logica.Modelo.AccesoDatos.UnidadDAO;
import gestion_ingresos_radio_kat.UI.Propietarios.Comisiones.ReportesGUI;
import gestion_ingresos_radio_kat.UI.RegistroUnidadGUI;

import java.awt.Color;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.swing.JOptionPane;
import javax.swing.JPanel;

import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class GestionIngresosGUI extends javax.swing.JFrame {

    private JPanel selectedPanel = null;
    private DefaultTableModel model;

    public GestionIngresosGUI() {
        initComponents();

        // Codigo  que ya funciona
        model = new DefaultTableModel(
                new Object[]{"Fecha", "Unidad", "Propietario", "Ingresos Brutos", "Comisión (%)", "Comisión Total", "Ganancia Propietario"},
                0
        );
        jTableGestionIngresos.setModel(model); // Asignar el modelo a la tabla
        //jTableGestionIngresos.setModel(model); // Asignar el modelo a la tabla

    }

    /*
    
     */
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        JpGestionIngresos = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        JpRegistroTurno = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        JpReportes = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        btnRegresar = new javax.swing.JButton();
        btnAdelante = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableGestionIngresos = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtIngresosBrutos = new javax.swing.JTextField();
        txtComisionPorcentaje = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jPanel6 = new javax.swing.JPanel();
        btnRegistrarUnidad = new javax.swing.JButton();
        btnLimpiarFormulario1 = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        btnCancelar1 = new javax.swing.JButton();
        btnGuardarRegistrosIngresos = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        btnBuscarUnidad = new javax.swing.JButton();
        jSeparator5 = new javax.swing.JSeparator();
        btnPegarCalcularUniadadYPropietario = new javax.swing.JButton();
        txtBusqueda = new javax.swing.JTextField();
        jSpDiaMesAnio = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setMinimumSize(new java.awt.Dimension(1271, 751));
        jPanel2.setPreferredSize(new java.awt.Dimension(1271, 751));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(29, 54, 88));
        jPanel1.setPreferredSize(new java.awt.Dimension(270, 640));

        JpGestionIngresos.setBackground(new java.awt.Color(29, 54, 88));
        JpGestionIngresos.setPreferredSize(new java.awt.Dimension(231, 66));
        JpGestionIngresos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JpGestionIngresosMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                JpGestionIngresosMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                JpGestionIngresosMouseExited(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Gestion Ingresos ");

        javax.swing.GroupLayout JpGestionIngresosLayout = new javax.swing.GroupLayout(JpGestionIngresos);
        JpGestionIngresos.setLayout(JpGestionIngresosLayout);
        JpGestionIngresosLayout.setHorizontalGroup(
            JpGestionIngresosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JpGestionIngresosLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        JpGestionIngresosLayout.setVerticalGroup(
            JpGestionIngresosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JpGestionIngresosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)
                .addContainerGap())
        );

        JpRegistroTurno.setBackground(new java.awt.Color(29, 54, 88));
        JpRegistroTurno.setPreferredSize(new java.awt.Dimension(231, 66));
        JpRegistroTurno.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JpRegistroTurnoMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                JpRegistroTurnoMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                JpRegistroTurnoMouseExited(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Registro Turno");

        javax.swing.GroupLayout JpRegistroTurnoLayout = new javax.swing.GroupLayout(JpRegistroTurno);
        JpRegistroTurno.setLayout(JpRegistroTurnoLayout);
        JpRegistroTurnoLayout.setHorizontalGroup(
            JpRegistroTurnoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JpRegistroTurnoLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(56, Short.MAX_VALUE))
        );
        JpRegistroTurnoLayout.setVerticalGroup(
            JpRegistroTurnoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JpRegistroTurnoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        JpReportes.setBackground(new java.awt.Color(29, 54, 88));
        JpReportes.setPreferredSize(new java.awt.Dimension(231, 66));
        JpReportes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JpReportesMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                JpReportesMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                JpReportesMouseExited(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Reportes");

        javax.swing.GroupLayout JpReportesLayout = new javax.swing.GroupLayout(JpReportes);
        JpReportes.setLayout(JpReportesLayout);
        JpReportesLayout.setHorizontalGroup(
            JpReportesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JpReportesLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(54, Short.MAX_VALUE))
        );
        JpReportesLayout.setVerticalGroup(
            JpReportesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JpReportesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel7.setBackground(new java.awt.Color(29, 54, 88));

        btnRegresar.setBackground(new java.awt.Color(29, 54, 88));
        btnRegresar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestion_ingresos_radio_kat/Imegenes/Iconos/Regresar.png"))); // NOI18N
        btnRegresar.setMaximumSize(new java.awt.Dimension(64, 24));
        btnRegresar.setMinimumSize(new java.awt.Dimension(64, 24));
        btnRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarActionPerformed(evt);
            }
        });

        btnAdelante.setBackground(new java.awt.Color(29, 54, 88));
        btnAdelante.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestion_ingresos_radio_kat/Imegenes/Iconos/adelante.png"))); // NOI18N
        btnAdelante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdelanteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(btnRegresar, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAdelante, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAdelante, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRegresar, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10))
        );

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestion_ingresos_radio_kat/Imegenes/Iconos/Ingresos.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(37, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(JpGestionIngresos, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)
                        .addComponent(JpRegistroTurno, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)
                        .addComponent(JpReportes, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)
                        .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel4)
                .addGap(74, 74, 74)
                .addComponent(JpGestionIngresos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(JpRegistroTurno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(JpReportes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(166, Short.MAX_VALUE))
        );

        jPanel2.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(-40, -10, 310, 780));

        jPanel3.setBackground(new java.awt.Color(68, 122, 156));
        jPanel3.setPreferredSize(new java.awt.Dimension(1030, 240));

        jLabel14.setBackground(new java.awt.Color(255, 255, 255));
        jLabel14.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 24)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("Gestion Ingresos");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(329, 329, 329)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 445, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(346, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(50, Short.MAX_VALUE))
        );

        jPanel2.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 0, 1120, 180));

        jPanel9.setBackground(new java.awt.Color(255, 255, 255));
        jPanel9.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTableGestionIngresos.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jTableGestionIngresos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Fecha", "Unidad", "Propietario  ", "Ingresos Brutos", "Comisión (%)", "Comisión Total", "Ingresos Neto", "Ganancia Propietario"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableGestionIngresos);
        if (jTableGestionIngresos.getColumnModel().getColumnCount() > 0) {
            jTableGestionIngresos.getColumnModel().getColumn(0).setHeaderValue("Fecha");
            jTableGestionIngresos.getColumnModel().getColumn(1).setHeaderValue("Unidad");
            jTableGestionIngresos.getColumnModel().getColumn(2).setHeaderValue("Propietario  ");
            jTableGestionIngresos.getColumnModel().getColumn(3).setHeaderValue("Ingresos Brutos");
            jTableGestionIngresos.getColumnModel().getColumn(4).setHeaderValue("Comisión (%)");
            jTableGestionIngresos.getColumnModel().getColumn(5).setHeaderValue("Comisión Total");
            jTableGestionIngresos.getColumnModel().getColumn(6).setHeaderValue("Ingresos Neto");
        }

        jPanel9.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 290, 930, 180));

        jLabel5.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("Ingrese Fecha");
        jPanel9.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 40, 114, -1));

        jLabel7.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("Ingresos Brutos");
        jPanel9.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 40, 141, -1));

        jLabel8.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 0));
        jLabel8.setText("Comisión (%)");
        jPanel9.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 40, 131, -1));

        txtIngresosBrutos.setBorder(null);
        txtIngresosBrutos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIngresosBrutosActionPerformed(evt);
            }
        });
        jPanel9.add(txtIngresosBrutos, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 62, 160, 30));

        txtComisionPorcentaje.setBorder(null);
        txtComisionPorcentaje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtComisionPorcentajeActionPerformed(evt);
            }
        });
        jPanel9.add(txtComisionPorcentaje, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 60, 140, 30));
        jPanel9.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 100, 200, 20));
        jPanel9.add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 100, 160, 20));
        jPanel9.add(jSeparator4, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 100, 140, 20));

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnRegistrarUnidad.setBackground(new java.awt.Color(255, 255, 255));
        btnRegistrarUnidad.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        btnRegistrarUnidad.setForeground(new java.awt.Color(255, 255, 255));
        btnRegistrarUnidad.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestion_ingresos_radio_kat/Imegenes/Iconos/add.png"))); // NOI18N
        btnRegistrarUnidad.setToolTipText("Asignar Turno");
        btnRegistrarUnidad.setBorder(null);
        btnRegistrarUnidad.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRegistrarUnidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarUnidadActionPerformed(evt);
            }
        });
        jPanel6.add(btnRegistrarUnidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, 54));

        btnLimpiarFormulario1.setBackground(new java.awt.Color(255, 255, 255));
        btnLimpiarFormulario1.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        btnLimpiarFormulario1.setForeground(new java.awt.Color(255, 255, 255));
        btnLimpiarFormulario1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestion_ingresos_radio_kat/Imegenes/Iconos/LimpiarFormulario.png"))); // NOI18N
        btnLimpiarFormulario1.setToolTipText("Borrar Formulario");
        btnLimpiarFormulario1.setBorder(null);
        btnLimpiarFormulario1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnLimpiarFormulario1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarFormulario1ActionPerformed(evt);
            }
        });
        jPanel6.add(btnLimpiarFormulario1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 10, -1, 56));

        btnActualizar.setText("Actualizar ");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });
        jPanel6.add(btnActualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 20, 120, 40));

        jPanel9.add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, 930, -1));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        btnCancelar1.setBackground(new java.awt.Color(255, 255, 255));
        btnCancelar1.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        btnCancelar1.setForeground(new java.awt.Color(255, 255, 255));
        btnCancelar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestion_ingresos_radio_kat/Imegenes/Iconos/Cancelar.png"))); // NOI18N
        btnCancelar1.setToolTipText("Cancelar");
        btnCancelar1.setBorder(null);
        btnCancelar1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCancelar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelar1ActionPerformed(evt);
            }
        });

        btnGuardarRegistrosIngresos.setText("Guardar Ingresos");
        btnGuardarRegistrosIngresos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarRegistrosIngresosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(btnGuardarRegistrosIngresos, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 701, Short.MAX_VALUE)
                .addComponent(btnCancelar1)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(0, 4, Short.MAX_VALUE)
                .addComponent(btnCancelar1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(btnGuardarRegistrosIngresos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel9.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 490, 930, 60));

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnBuscarUnidad.setText("Buscar");
        btnBuscarUnidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarUnidadActionPerformed(evt);
            }
        });
        jPanel5.add(btnBuscarUnidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, 60, 30));
        jPanel5.add(jSeparator5, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 50, 220, 30));

        btnPegarCalcularUniadadYPropietario.setText("Pegar Datos Ya Registrados ");
        btnPegarCalcularUniadadYPropietario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPegarCalcularUniadadYPropietarioActionPerformed(evt);
            }
        });
        jPanel5.add(btnPegarCalcularUniadadYPropietario, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 20, 200, 30));

        txtBusqueda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBusquedaActionPerformed(evt);
            }
        });
        jPanel5.add(txtBusqueda, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 20, 220, 30));

        jPanel9.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 220, 930, 100));

        jSpDiaMesAnio.setModel(new javax.swing.SpinnerDateModel());
        jPanel9.add(jSpDiaMesAnio, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 70, 200, -1));

        jPanel2.add(jPanel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 180, 960, 570));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 1230, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 751, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAdelanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdelanteActionPerformed

        // TODO add your handling code here:
        ReportesGUI registro = new ReportesGUI();
        registro.setVisible(true);
        // Cerrar la ventana actual
        this.dispose();

    }//GEN-LAST:event_btnAdelanteActionPerformed

    private void btnRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarActionPerformed

        // TODO add your handling code here:
        RegistroUnidadGUI registro = new RegistroUnidadGUI();
        registro.setVisible(true);

        // Cerrar la ventana actual
        this.dispose();

    }//GEN-LAST:event_btnRegresarActionPerformed

    private void btnRegistrarUnidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarUnidadActionPerformed
        try {
            Date fecha = (Date) jSpDiaMesAnio.getValue();
            String fechaStr = new SimpleDateFormat("dd/MM/yyyy").format(fecha);

            String tipoPropietario = RegistroUnidadGUI.ultimoTipoUnidadRegistrada;
            String propietario = RegistroUnidadGUI.ultimoNombrePropietarioRegistrado;

            // Si no se han actualizado las variables estáticas, intentamos obtener datos de la última fila de la tabla
            if ((tipoPropietario == null || tipoPropietario.isEmpty())
                    || (propietario == null || propietario.isEmpty())) {

                int lastRow = model.getRowCount() - 1;
                if (lastRow >= 0) {
                    tipoPropietario = model.getValueAt(lastRow, 1).toString(); // Columna "Unidad"
                    propietario = model.getValueAt(lastRow, 2).toString();     // Columna "Propietario"
                } else {
                    JOptionPane.showMessageDialog(this, "No hay datos disponibles. Actualice primero o registre unidad.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }

            double ingresosBrutos = Double.parseDouble(txtIngresosBrutos.getText().trim());
            double comisionTotal = CalculoIngresos.calcularComisionTotal(ingresosBrutos, tipoPropietario);
            double ganancia = CalculoIngresos.calcularGananciaPropietario(ingresosBrutos, comisionTotal);

            UnidadDAO unidadDAO = new UnidadDAO();
            String placa = unidadDAO.obtenerPlacaPorPropietario(propietario);

            if (placa == null || placa.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No se encontró la placa para: " + propietario, "Advertencia", JOptionPane.WARNING_MESSAGE);
                return;
            }

            model.addRow(new Object[]{
                fechaStr,
                tipoPropietario,
                propietario,
                String.format("%.2f", ingresosBrutos),
                tipoPropietario.equalsIgnoreCase("Propietario unico") ? "10%" : "5%",
                String.format("%.2f", comisionTotal),
                String.format("%.2f", ganancia)
            });

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Ingrese valores numéricos válidos.", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnRegistrarUnidadActionPerformed

    //validacion a implementar 
    //Implementacion anterior que sirve
    /*
   
     private void btnRegistrarUnidadActionPerformed(java.awt.event.ActionEvent evt) {                                                   

        try {
            Date fecha = (Date) jSpDiaMesAnio.getValue();
            String fechaStr = new SimpleDateFormat("dd/MM/yyyy").format(fecha);
            String tipoPropietario = RegistroUnidadGUI.ultimoTipoUnidadRegistrada;
            String propietario = RegistroUnidadGUI.ultimoNombrePropietarioRegistrado;

            // Validar campos
            if (tipoPropietario == null || tipoPropietario.isEmpty() || propietario == null || propietario.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Actualice primero la unidad y propietario.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            double ingresosBrutos = Double.parseDouble(txtIngresosBrutos.getText().trim());
            double comisionTotal = CalculoIngresos.calcularComisionTotal(ingresosBrutos, tipoPropietario);
            double ganancia = ingresosBrutos - comisionTotal;

            // Obtener la placa desde la base de datos (unidadDAO)
            UnidadDAO unidadDAO = new UnidadDAO();
            String placa = unidadDAO.obtenerPlacaPorPropietario(propietario);

            if (placa == null || placa.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No se encontró la placa para: " + propietario, "Advertencia", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Agregar fila a la tabla con todos los datos
            model.addRow(new Object[]{
                fechaStr,
                tipoPropietario,
                propietario,
                placa,
                String.format("%.2f", ingresosBrutos),
                tipoPropietario.equalsIgnoreCase("Propietario unico") ? "10%" : "5%",
                String.format("%.2f", comisionTotal),
                String.format("%.2f", ganancia)
            });

            // Limpiar campos
            //txtIngresosBrutos.setText("");
            //txtComisionPorcentaje.setText("");
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Ingrese valores numéricos válidos.", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

    }                                                  

     */
    //Implementacion que sirve 
    /*'
     private void btnRegistrarUnidadActionPerformed(java.awt.event.ActionEvent evt) {                                                   

        try {
            Date fecha = (Date) jSpDiaMesAnio.getValue();
            String fechaStr = new SimpleDateFormat("dd/MM/yyyy").format(fecha);
            String tipoPropietario = RegistroUnidadGUI.ultimoTipoUnidadRegistrada;
            String propietario = RegistroUnidadGUI.ultimoNombrePropietarioRegistrado;

            // Validar campos
            if (tipoPropietario == null || tipoPropietario.isEmpty() || propietario == null || propietario.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Actualice primero la unidad y propietario.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            double ingresosBrutos = Double.parseDouble(txtIngresosBrutos.getText().trim());
            double comisionTotal = CalculoIngresos.calcularComisionTotal(ingresosBrutos, tipoPropietario);
            double ganancia = ingresosBrutos - comisionTotal;

            // Obtener la placa desde la base de datos (unidadDAO)
            UnidadDAO unidadDAO = new UnidadDAO();
            String placa = unidadDAO.obtenerPlacaPorPropietario(propietario);

            if (placa == null || placa.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No se encontró la placa para: " + propietario, "Advertencia", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Agregar fila a la tabla con todos los datos
            model.addRow(new Object[]{
                fechaStr,
                tipoPropietario,
                propietario,
                placa,
                String.format("%.2f", ingresosBrutos),
                tipoPropietario.equalsIgnoreCase("Propietario unico") ? "10%" : "5%",
                String.format("%.2f", comisionTotal),
                String.format("%.2f", ganancia)
            });

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Ingrese valores numéricos válidos.", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

    }         
     */

    private void btnLimpiarFormulario1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarFormulario1ActionPerformed
        // TODO add your handling code here:
        txtComisionPorcentaje.setText("");
        txtIngresosBrutos.setText("");


    }//GEN-LAST:event_btnLimpiarFormulario1ActionPerformed

    private void btnCancelar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelar1ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnCancelar1ActionPerformed

    private void JpGestionIngresosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JpGestionIngresosMouseClicked
        // TODO add your handling code here:

        // TODO add your handling code here:
        GestionIngresosGUI ingresos = new GestionIngresosGUI();
        ingresos.setVisible(true);

        // Cerrar la ventana actual
        this.dispose();

        if (selectedPanel != null) {
            selectedPanel.setBackground(new Color(44, 90, 120)); // Color original al deseleccionar
        }
        selectedPanel = JpGestionIngresos;
        JpGestionIngresos.setBackground(new Color(68, 122, 156));
        JOptionPane.showMessageDialog(this, "Gestión de ingresos seleccionada.", "Información", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_JpGestionIngresosMouseClicked

    private void JpGestionIngresosMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JpGestionIngresosMouseEntered
        // TODO add your handling code here:

        if (selectedPanel != JpGestionIngresos) {
            JpGestionIngresos.setBackground(new Color(68, 122, 156));
        }
    }//GEN-LAST:event_JpGestionIngresosMouseEntered

    private void JpGestionIngresosMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JpGestionIngresosMouseExited
        // TODO add your handling code here:
        if (selectedPanel != JpGestionIngresos) {
            JpGestionIngresos.setBackground(new Color(44, 90, 120));
        }
    }//GEN-LAST:event_JpGestionIngresosMouseExited


    private void JpRegistroTurnoMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JpRegistroTurnoMouseEntered
        // TODO add your handling code here:
        if (selectedPanel != JpRegistroTurno) {
            JpRegistroTurno.setBackground(new Color(68, 122, 156));
        }
    }//GEN-LAST:event_JpRegistroTurnoMouseEntered

    private void JpRegistroTurnoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JpRegistroTurnoMouseClicked
        // TODO add your handling code here:

        // TODO add your handling code here:
        RegistroTurnoGUI ingresos = new RegistroTurnoGUI();
        ingresos.setVisible(true);

        if (selectedPanel != null) {
            selectedPanel.setBackground(new Color(44, 90, 120));
        }
        selectedPanel = JpRegistroTurno;
        JpRegistroTurno.setBackground(new Color(68, 122, 156));
        JOptionPane.showMessageDialog(this, "Registro de turno seleccionado.", "Información", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_JpRegistroTurnoMouseClicked

    private void JpRegistroTurnoMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JpRegistroTurnoMouseExited
        if (selectedPanel != JpRegistroTurno) {
            JpRegistroTurno.setBackground(new Color(44, 90, 120));
        }

    }//GEN-LAST:event_JpRegistroTurnoMouseExited


    private void JpReportesMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JpReportesMouseEntered
        if (selectedPanel != JpReportes) {
            JpReportes.setBackground(new Color(68, 122, 156));
        }
    }//GEN-LAST:event_JpReportesMouseEntered

    private void JpReportesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JpReportesMouseClicked
        ReportesGUI rep = new ReportesGUI();
        rep.setVisible(true);

        if (selectedPanel != null) {
            selectedPanel.setBackground(new Color(44, 90, 120));
        }
        selectedPanel = JpReportes;
        JpReportes.setBackground(new Color(68, 122, 156));
        JOptionPane.showMessageDialog(this, "Reporte generado.", "Información", JOptionPane.INFORMATION_MESSAGE);

    }//GEN-LAST:event_JpReportesMouseClicked

    private void JpReportesMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JpReportesMouseExited
        // TODO add your handling code here:
        if (selectedPanel != JpReportes) {
            JpReportes.setBackground(new Color(44, 90, 120));
        }
    }//GEN-LAST:event_JpReportesMouseExited

    private void txtIngresosBrutosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIngresosBrutosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIngresosBrutosActionPerformed

    private void txtComisionPorcentajeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtComisionPorcentajeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtComisionPorcentajeActionPerformed

    private void btnBuscarUnidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarUnidadActionPerformed
        String termino = txtBusqueda.getText().trim().toLowerCase();

        if (termino.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Escribe el nombre del propietario o la placa a buscar.");
            return;
        }

        UnidadDAO unidadDAO = new UnidadDAO();
        List<Object[]> unidades = unidadDAO.obtenerUnidades();

        boolean encontrado = false;

        for (Object[] unidad : unidades) {
            String placa = ((String) unidad[0]).toLowerCase();
            String nombrePropietario = ((String) unidad[1]).toLowerCase();
            String tipoUnidad = (String) unidad[4];

            if (placa.contains(termino) || nombrePropietario.contains(termino)) {
                double ingresosBrutos = 0.0;
                double comision = CalculoIngresos.calcularComisionTotal(ingresosBrutos, tipoUnidad);
                double ganancia = CalculoIngresos.calcularGananciaPropietario(ingresosBrutos, comision);

                // Agregar fila a la tabla
                model.addRow(new Object[]{
                    "", // Fecha
                    tipoUnidad,
                    unidad[1], // Propietario (nombre original con mayúsculas)
                    "", // Ingresos Brutos vacío
                    tipoUnidad.equalsIgnoreCase("Propietario unico") ? "10%" : "5%",
                    String.format("%.2f", comision),
                    String.format("%.2f", ganancia)
                });

                // Mostrar mensaje según tipo
                if (tipoUnidad.equalsIgnoreCase("Propietario unico")) {
                    JOptionPane.showMessageDialog(this,
                            "Propietario único encontrado.\nAsignarle 10% de comisión e ingresar su ingreso bruto correspondiente.",
                            "Propietario único", JOptionPane.INFORMATION_MESSAGE);
                } else if (tipoUnidad.equalsIgnoreCase("Chofer externo")) {
                    JOptionPane.showMessageDialog(this,
                            "Chofer externo encontrado.\nAsignarle 5% de comisión e ingresar su ingreso bruto correspondiente.",
                            "Chofer externo", JOptionPane.INFORMATION_MESSAGE);
                }

                encontrado = true;
                break;
            }
        }

        if (!encontrado) {
            JOptionPane.showMessageDialog(this, "No se encontró ningún registro con ese nombre o placa.");
        }

    }//GEN-LAST:event_btnBuscarUnidadActionPerformed

    private void txtBusquedaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBusquedaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBusquedaActionPerformed


    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        String unidad = RegistroUnidadGUI.ultimoTipoUnidadRegistrada;
        String propietario = RegistroUnidadGUI.ultimoNombrePropietarioRegistrado;

        if (unidad.isEmpty() || propietario.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                    "No hay unidad registrada. Registre una unidad primero.",
                    "Advertencia",
                    JOptionPane.WARNING_MESSAGE
            );
            return;
        }

        DefaultTableModel model = (DefaultTableModel) jTableGestionIngresos.getModel();
        // Actualizar todas las filas existentes o agregar una nueva si está vacía
        if (model.getRowCount() == 0) {
            model.addRow(new Object[]{"", unidad, propietario, "", "", ""});
        } else {
            for (int i = 0; i < model.getRowCount(); i++) {
                if (model.getValueAt(i, 1) == null || model.getValueAt(i, 1).toString().isEmpty()) {
                    model.setValueAt(unidad, i, 1); // Columna "Unidad"
                    model.setValueAt(propietario, i, 2); // Columna "Propietario"
                }
            }
        }

        JOptionPane.showMessageDialog(this, "Campos actualizados correctamente.");
    }//GEN-LAST:event_btnActualizarActionPerformed

//Metodo que ya funciona
    /*
    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {                                              
        String unidad = RegistroUnidadGUI.ultimoTipoUnidadRegistrada;
        String propietario = RegistroUnidadGUI.ultimoNombrePropietarioRegistrado;

        if (unidad.isEmpty() || propietario.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                    "No hay unidad registrada. Registre una unidad primero.",
                    "Advertencia",
                    JOptionPane.WARNING_MESSAGE
            );
            return;
        }

        DefaultTableModel model = (DefaultTableModel) jTableGestionIngresos.getModel();
        // Actualizar todas las filas existentes o agregar una nueva si está vacía
        if (model.getRowCount() == 0) {
            model.addRow(new Object[]{"", unidad, propietario, "", "", ""});
        } else {
            for (int i = 0; i < model.getRowCount(); i++) {
                if (model.getValueAt(i, 1) == null || model.getValueAt(i, 1).toString().isEmpty()) {
                    model.setValueAt(unidad, i, 1); // Columna "Unidad"
                    model.setValueAt(propietario, i, 2); // Columna "Propietario"
                }
            }
        }

        JOptionPane.showMessageDialog(this, "Campos actualizados correctamente.");
    }     
     */

    private void btnPegarCalcularUniadadYPropietarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPegarCalcularUniadadYPropietarioActionPerformed
        UnidadDAO unidadDAO = new UnidadDAO();
        List<Object[]> unidades = unidadDAO.obtenerUnidades();

        if (unidades.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay unidades registradas en la base de datos.");
            return;
        }

        for (Object[] unidad : unidades) {
            String nombrePropietario = (String) unidad[1];
            String tipoUnidad = (String) unidad[4];

            double ingresosBrutos = 0.0;
            double comision = CalculoIngresos.calcularComisionTotal(ingresosBrutos, tipoUnidad);
            double ganancia = CalculoIngresos.calcularGananciaPropietario(ingresosBrutos, comision);

            model.addRow(new Object[]{
                "", // Fecha
                tipoUnidad,
                nombrePropietario,
                "", // Ingresos Brutos vacío
                tipoUnidad.equalsIgnoreCase("Propietario unico") ? "10%" : "5%",
                String.format("%.2f", comision),
                String.format("%.2f", ganancia)
            });
        }

        JOptionPane.showMessageDialog(this, "Datos cargados correctamente desde la base de datos radio_kat.");
    }//GEN-LAST:event_btnPegarCalcularUniadadYPropietarioActionPerformed

    private void btnGuardarRegistrosIngresosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarRegistrosIngresosActionPerformed

        RegistroIngresosDAO dao = new RegistroIngresosDAO();
        UnidadDAO unidadDAO = new UnidadDAO();

        boolean alMenosUnRegistroGuardado = false;

        for (int i = 0; i < model.getRowCount(); i++) {
            try {
                String fecha = model.getValueAt(i, 0) != null ? model.getValueAt(i, 0).toString() : "";
                String tipoPropietario = model.getValueAt(i, 1) != null ? model.getValueAt(i, 1).toString().trim() : "";
                String nombrePropietario = model.getValueAt(i, 2) != null ? model.getValueAt(i, 2).toString().trim() : "";
                String ingresosBrutosStr = model.getValueAt(i, 3) != null ? model.getValueAt(i, 3).toString().replaceAll("[^\\d.]", "") : "0";

                if (fecha.isEmpty() || nombrePropietario.isEmpty() || ingresosBrutosStr.isEmpty() || tipoPropietario.isEmpty()) {
                    System.err.println("Fila " + (i + 1) + " no se guardó: faltan datos obligatorios.");
                    continue;
                }

                double ingresosBrutos = Double.parseDouble(ingresosBrutosStr);
                double comisionTotal = CalculoIngresos.calcularComisionTotal(ingresosBrutos, tipoPropietario);
                double ganancia = CalculoIngresos.calcularGananciaPropietario(ingresosBrutos, comisionTotal);

                model.setValueAt(String.format("%.2f", comisionTotal), i, 5);
                model.setValueAt(String.format("%.2f", ganancia), i, 6);

                String placa = unidadDAO.obtenerPlacaPorPropietario(nombrePropietario);
                if (placa == null || placa.isEmpty()) {
                    System.err.println("Fila " + (i + 1) + " no se guardó: placa no encontrada para " + nombrePropietario);
                    continue;
                }

                boolean guardado = dao.guardarRegistro(fecha, placa, ingresosBrutos, comisionTotal, ganancia);
                if (guardado) {
                    System.out.println("Fila " + (i + 1) + " guardada correctamente.");
                    JOptionPane.showMessageDialog(this,
                            "Fila " + (i + 1) + " guardada correctamente.",
                            "Éxito",
                            JOptionPane.INFORMATION_MESSAGE
                    );
                    alMenosUnRegistroGuardado = true;
                } else {
                    System.err.println("Fila " + (i + 1) + " no se guardó: error en la base de datos.");
                }

            } catch (NumberFormatException e) {
                System.err.println("Fila " + (i + 1) + " no se guardó: formato inválido en ingresos brutos.");
            } catch (Exception e) {
                System.err.println("Fila " + (i + 1) + " no se guardó: " + e.getMessage());
            }
        }

        if (!alMenosUnRegistroGuardado) {
            JOptionPane.showMessageDialog(this,
                    "No se guardó ningún registro. Revisa la consola para ver detalles de los errores.",
                    "Aviso",
                    JOptionPane.WARNING_MESSAGE
            );
        }

    }//GEN-LAST:event_btnGuardarRegistrosIngresosActionPerformed

    //IMPLEMENTACION RECIENTE
    //IMPLEMENTACION ANTERIOR FUNCIONAL
    /*
     
    private void btnGuardarRegistrosIngresosActionPerformed(java.awt.event.ActionEvent evt) {                                                            
    RegistroIngresosDAO dao = new RegistroIngresosDAO();
        UnidadDAO unidadDAO = new UnidadDAO();
        boolean errorOcurrido = false;

        for (int i = 0; i < model.getRowCount(); i++) {
            try {
                String fecha = model.getValueAt(i, 0) != null ? model.getValueAt(i, 0).toString() : "";
                String tipoPropietario = model.getValueAt(i, 1) != null ? model.getValueAt(i, 1).toString().trim() : "";
                String nombrePropietario = model.getValueAt(i, 2) != null ? model.getValueAt(i, 2).toString().trim() : "";
                String ingresosBrutosStr = model.getValueAt(i, 3) != null ? model.getValueAt(i, 3).toString().replaceAll("[^\\d.]", "") : "0";
                //String tipoPropietario = model.getValueAt(i, 4) != null ? model.getValueAt(i, 4).toString().trim() : "";

                if (fecha.isEmpty() || nombrePropietario.isEmpty() || ingresosBrutosStr.isEmpty() || tipoPropietario.isEmpty()) {
                    JOptionPane.showMessageDialog(this,
                            "Faltan datos en la fila " + (i + 1),
                            "Error",
                            JOptionPane.ERROR_MESSAGE
                    );
                    errorOcurrido = true;
                    continue;
                }

                double ingresosBrutos = Double.parseDouble(ingresosBrutosStr);
                double comisionTotal = CalculoIngresos.calcularComisionTotal(ingresosBrutos, tipoPropietario);
                double ganancia = CalculoIngresos.calcularGananciaPropietario(ingresosBrutos, comisionTotal);

                // Actualizar la tabla con los valores calculados
                model.setValueAt(String.format("%.2f", comisionTotal), i, 5);
                model.setValueAt(String.format("%.2f", ganancia), i, 6);

                // Obtener la placa
                String placa = unidadDAO.obtenerPlacaPorPropietario(nombrePropietario);
                if (placa == null || placa.isEmpty()) {
                    JOptionPane.showMessageDialog(this,
                            "No se encontró la placa para: " + nombrePropietario + ". Registre la unidad primero.",
                            "Error",
                            JOptionPane.ERROR_MESSAGE
                    );
                    errorOcurrido = true;
                    continue;
                }

                // Guardar en la BD
                boolean guardado = dao.guardarRegistro(fecha, placa, ingresosBrutos, comisionTotal, ganancia);
                if (!guardado) {

                    JOptionPane.showMessageDialog(this,
                            "Error al guardar la fila " + (i + 1),
                            "Error",
                            JOptionPane.INFORMATION_MESSAGE
                    );

                    errorOcurrido = true;
                } else {
                    System.out.println(" Fila " + (i + 1) + " guardada correctamente.");
                }

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this,
                        "Formato inválido en la fila " + (i + 1) + ". Use solo números.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE
                );
                errorOcurrido = true;
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this,
                        "Error en la fila " + (i + 1) + ": " + e.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE
                );
                errorOcurrido = true;
            }
        }

        if (!errorOcurrido) {
            JOptionPane.showMessageDialog(this,
                    "Todos los registros se guardaron correctamente.",
                    "Éxito",
                    JOptionPane.INFORMATION_MESSAGE
            );
        }
    }                                                           


     */
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GestionIngresosGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GestionIngresosGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GestionIngresosGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GestionIngresosGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GestionIngresosGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel JpGestionIngresos;
    private javax.swing.JPanel JpRegistroTurno;
    private javax.swing.JPanel JpReportes;
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnAdelante;
    private javax.swing.JButton btnBuscarUnidad;
    private javax.swing.JButton btnCancelar1;
    private javax.swing.JButton btnGuardarRegistrosIngresos;
    private javax.swing.JButton btnLimpiarFormulario1;
    private javax.swing.JButton btnPegarCalcularUniadadYPropietario;
    private javax.swing.JButton btnRegistrarUnidad;
    private javax.swing.JButton btnRegresar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSpinner jSpDiaMesAnio;
    private javax.swing.JTable jTableGestionIngresos;
    private javax.swing.JTextField txtBusqueda;
    private javax.swing.JTextField txtComisionPorcentaje;
    private javax.swing.JTextField txtIngresosBrutos;
    // End of variables declaration//GEN-END:variables
}
